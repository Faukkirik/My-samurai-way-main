{"version":3,"file":"static/js/989.26ec2df3.chunk.js","mappings":"0KACA,G,QAAA,CAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,0BCA1I,EAA+G,2B,mBCMlGA,EAAyC,SAACC,GACnD,OACI,gBAAKC,UAAWC,EAAhB,UACI,SAAC,KAAD,CAASC,GAAI,YAAcH,EAAMI,GAAjC,SAAsCJ,EAAMK,UCL3CC,EAAsC,SAACN,GAChD,OACI,gBAAKC,UAAWC,EAAAA,QAAhB,SAA4BF,EAAMO,W,uCCyCpCC,GAAcC,EAAAA,EAAAA,GAAiB,IAcxBC,GAAsBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,wBAAjBD,EAbL,SAACX,GAC3B,OACI,kBAAMa,SAAUb,EAAMc,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAUC,SAAU,CAACC,EAAAA,EAAUX,GAAcH,KAAM,iBAAkBe,YAAa,0BAExG,0BACI,6C,8DChDZC,EAA6B,SAACC,GAAD,MAAyC,CACtEC,OAAQD,EAAME,YAAYD,SCC9B,IAcA,GAAeE,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAfiB,SAACJ,GAElB,MAAO,CACHK,YAAaL,EAAMM,mBAGJ,SAACC,GACpB,MAAO,CACHC,WAAY,SAACC,GACTF,GAASG,EAAAA,EAAAA,GAAaD,UDP3B,SAA6BE,GAUhC,OADqCP,EAAAA,EAAAA,IAAQL,EAARK,EAPrC,SAA2B1B,GAEvB,IAAKuB,EAAwBvB,EAAxBuB,OAAWW,GAAhB,OAA6BlC,EAA7B,GACA,OAAKuB,GACE,SAACU,GAAD,UAAeC,KADF,SAAC,KAAD,CAAU/B,GAAI,gBCO1C,EFTuB,SAACH,GAKpB,OACI,iBAAKC,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACKF,EAAM2B,YAAYQ,QAAQC,KAAI,SAACC,GAC5B,OACI,SAACtC,EAAD,CACIK,GAAIiC,EAAGjC,GACPC,KAAMgC,EAAGhC,MACJgC,EAAGjC,UAIxB,iBAAKH,UAAWC,EAAAA,SAAhB,WACI,yBAAMF,EAAM2B,YAAYpB,QAAQ6B,KAAI,SAACC,GACjC,OACI,SAAC/B,EAAD,CACIF,GAAIiC,EAAGjC,GACPG,QAAS8B,EAAG9B,SACP8B,EAAGjC,UAKpB,SAACM,EAAD,CAAqBG,SA1BX,SAACyB,GACnBtC,EAAM8B,WAAWQ,EAAOP","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://samurai-way/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__3QzDb\",\"dialogsItems\":\"Dialogs_dialogsItems__nrYEW\",\"dialog\":\"Dialogs_dialog__1syOz\",\"active\":\"Dialogs_active__8zpxB\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"DialogItem_dialogs__tYWkN\",\"dialogsItems\":\"DialogItem_dialogsItems__-OErS\",\"dialog\":\"DialogItem_dialog__KW7aC\",\"active\":\"DialogItem_active__4m5MC\",\"messages\":\"DialogItem_messages__lnYbX\",\"message\":\"DialogItem_message__WEnqO\"};","import s from \"./DialogItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {DialogsPropsType} from \"../../../Redux/dialogs-reducer\";\r\n\r\n\r\n\r\nexport const DialogItem: React.FC<DialogsPropsType> = (props) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import s from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\nimport {MessagePropsType} from \"../../../Redux/dialogs-reducer\";\r\n\r\n\r\nexport const Message: React.FC<MessagePropsType> = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {ArrayMessagePage} from \"../../Redux/store\";\r\nimport {DialogsPropsType, MessagePropsType} from \"../../Redux/dialogs-reducer\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nexport type DialogsType = {\r\n    messagePage: ArrayMessagePage\r\n    onMessageChange: (text: string) => void\r\n    addMessage: () => void\r\n}\r\nexport const Dialogs = (props: any) => {\r\n\r\n    const addNewMessage = (values: any) => {\r\n        props.addMessage(values.newMessageBody)\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {props.messagePage.dialogs.map((el: DialogsPropsType) => {\r\n                    return (\r\n                        <DialogItem\r\n                            id={el.id}\r\n                            name={el.name}\r\n                            key={el.id}/>\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{props.messagePage.message.map((el: MessagePropsType) => {\r\n                    return (\r\n                        <Message\r\n                            id={el.id}\r\n                            message={el.message}\r\n                            key={el.id}\r\n                        />\r\n                    )\r\n                })}\r\n                </div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst maxLength50 = maxLengthCreator(50)\r\nexport const AddMessageForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} validate={[required, maxLength50]} name={\"newMessageBody\"} placeholder={'Enter your message'}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm)","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StoreType} from \"../Redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean | null\r\n}\r\nlet mapStateToForRedirectProps = (store: StoreType):MapStatePropsType => ({\r\n    isAuth: store.authReducer.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>){\r\n\r\n    function RedirectComponent(props: MapStatePropsType) {\r\n\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToForRedirectProps)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export const withAuthRedirect =(Component: ComponentType)=>{\r\n//     class RedirectComponent extends React.Component<MapStatePropsType, MapStatePropsType>{\r\n//         render() {\r\n//             if (!this.props.isAuth) return <Redirect to={'/login'} />\r\n//             return <Component {...this.props}/>\r\n//         }\r\n//     }\r\n//     let ConnectedAuthRedirectComponent = connect(mapStateToForRedirectProps)(RedirectComponent)\r\n//     return ConnectedAuthRedirectComponent\r\n// }","import React from \"react\";\r\nimport {AddMessageAC} from \"../../Redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {StoreType} from \"../../Redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\n\r\nlet mapStateToProps =(store: StoreType)=>{\r\n\r\n    return {\r\n        messagePage: store.dialogsReducer,\r\n    }\r\n}\r\nlet mapDispatchToProps=(dispatch:Dispatch)=>{\r\n    return {\r\n        addMessage: (newMessageBody: string)=> {\r\n            dispatch(AddMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n"],"names":["DialogItem","props","className","s","to","id","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","mapStateToForRedirectProps","store","isAuth","authReducer","compose","connect","messagePage","dialogsReducer","dispatch","addMessage","newMessageBody","AddMessageAC","Component","restProps","dialogs","map","el","values"],"sourceRoot":""}